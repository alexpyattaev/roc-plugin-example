// ⚠️ GENERATED CODE ⚠️ - this entire file was generated by the `roc glue` CLI command

#![allow(unused_unsafe)]
#![allow(dead_code)]
#![allow(unused_mut)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(clippy::undocumented_unsafe_blocks)]
#![allow(clippy::redundant_static_lifetimes)]
#![allow(clippy::unused_unit)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::let_and_return)]
#![allow(clippy::missing_safety_doc)]
#![allow(clippy::redundant_static_lifetimes)]
#![allow(clippy::needless_borrow)]
#![allow(clippy::clone_on_copy)]

#[derive(Clone, Copy, Default, Debug, PartialEq, PartialOrd, Eq, Ord, Hash)]
#[repr(C)]
pub struct RGBA {
    pub a: u8,
    pub b: u8,
    pub g: u8,
    pub r: u8,
}

pub fn mainForHost(arg0: roc_std::RocStr) -> RGBA {
    extern "C" {
        fn roc__mainForHost_1_exposed_generic(
            _: *mut RGBA,
            _: &mut core::mem::ManuallyDrop<roc_std::RocStr>,
        );
    }

    let mut ret = core::mem::MaybeUninit::uninit();

    unsafe {
        roc__mainForHost_1_exposed_generic(
            ret.as_mut_ptr(),
            &mut core::mem::ManuallyDrop::new(arg0),
        );

        ret.assume_init()
    }
}
